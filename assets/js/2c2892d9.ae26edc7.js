"use strict";(self.webpackChunksubnet=self.webpackChunksubnet||[]).push([[5441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=i.createContext({}),l=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),y=r,b=p["".concat(d,".").concat(y)]||p[y]||u[y]||o;return n?i.createElement(b,a(a({ref:t},c),{},{components:n})):i.createElement(b,a({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=n(3117),r=(n(7294),n(3905));const o={id:"identity_bundles",title:"Identity Bundles",sidebar_label:"Identity Bundles"},a=void 0,s={unversionedId:"unp/identity_bundles",id:"version-0.1.0/unp/identity_bundles",title:"Identity Bundles",description:"Identity bundles are self-signed certificates of identity extensively used in SUB. They are the fundamental data structures used in Subnet's decentralized identity system.",source:"@site/versioned_docs/version-0.1.0/unp/identity_bundles.md",sourceDirName:"unp",slug:"/unp/identity_bundles",permalink:"/docs/unp/identity_bundles",draft:!1,editUrl:"https://github.com/upstter/versioned_docs/version-0.1.0/unp/identity_bundles.md",tags:[],version:"0.1.0",lastUpdatedBy:"Aviv Eyal",lastUpdatedAt:1664954121,formattedLastUpdatedAt:"Oct 5, 2022",frontMatter:{id:"identity_bundles",title:"Identity Bundles",sidebar_label:"Identity Bundles"},sidebar:"version-0.1.0/someSidebar",previous:{title:"Onboarding Clients",permalink:"/docs/unp/client_onboarding"},next:{title:"Providers Terms of Service",permalink:"/docs/unp/service_bundles"}},d={},l=[{value:"Obtaining Providers and Client Bundles",id:"obtaining-providers-and-client-bundles",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Identity bundles are self-signed certificates of identity extensively used in SUB. They are the fundamental data structures used in Subnet's decentralized identity system."),(0,r.kt)("p",null,"Service providers publish their identity bundles to enable clients and other service providers to securely communicate with them and to authenticate message they get from them. Clients use identity bundles to advertise their service provider and their identity on the network."),(0,r.kt)("p",null,"There is no central server that stores bundles and no root certificates. Bundles are distributed over the network and any entity on the network can locate bundles based on public information such as entity's identity key. Bundles only contain public information that enables network entities to securely and privately communicate with them using SUB."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Bundles are stored on SUB blockchain. This guarantees that at any time, any client or provider is able to obtain any other client or provider bundle from the network without relying on a central domain name authority. In addition, the SUB blockchain provides censorship-free store. As long as there's at least one honest validator, providers and clients can't be blocked from publishing their identity to SUB by any party.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ProviderIdentityBundle")," is a certificate created and published by a service provider to announce its identity, additional public key and network dial-up info.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ClientIdentityBundle")," is a certificate created and published by  clients to attest to their identity and their current service provider. It includes the client's ",(0,r.kt)("inlineCode",{parentName:"p"},"ProviderIdentityBundle"),". Client is attesting its public id, pre-keys and its current service provider.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ProviderSignedClientIdentityBundle")," is a certificate created and published by a provider to attest that it is providing a service to a client. It includes an ",(0,r.kt)("inlineCode",{parentName:"p"},"ClientIdentityBundle"),". Provider is attesting its public id, pre-key, the client data and the fact that it is the client's service provider. Provider creates this bundle and publishes it on the network and return it to the client when it accepts a request from a client to become its service provider on the network received via its public-service api."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"// Public service provider identity bundle.\n// See X2DH protocol for additional details.\n// Only include public data\nmessage ProviderIdentityBundle {\n    uint64 time_stamp = 1; // unique publishing time per provider\n    EntityId provider_id = 2; // This is IKb in x2dh terms for Bob\n    Address address = 3; // Provider account's address for payments\n    repeated DialupInfo dial_up_info = 4; // node dial-up info\n    PreKey pre_key = 5; // current x2dh pre-key (SPKb in x2dh protocol)\n    repeated PreKey one_time_keys = 6; // x2dh one-time keys (optional)\n    MediaContent profile_image = 7; // profile image\n    Signature node_signature = 8; // node attests for keys (provider has node private key)\n    Signature provider_signature = 9; // provider attests node id (node belongs to provider)\n}\n\n// Provider identity bundle with private data corresponding to the public data.\n// Private data includes private keys for public keys shared via the public bundle\n// todo: move this to another package - data objects - this is not used in the api\nmessage PrivateProviderIdentityBundle {\n    ProviderIdentityBundle public_bundle = 1;\n    KeyPair provider_id_keypair = 2;\n    PrivateKey pre_key = 3; // current x2dh x25519 pre-key private (SPKb in x2dh protocol)\n    repeated KeyPair one_time_keys_pairs = 4; // x2dh one-time key-pairs (optional)\n}\n\n// Client published bundle specifying current provider and x2dh pre-keys\n// Client represents a pseudo-anon identity that has its private key.\nmessage ClientIdentityBundle {\n    uint64 time_stamp = 1;\n    EntityId client_id = 2; // cryptographic id - public key - ika...\n    Address address = 3; // client current wallet address for payments\n    ProviderIdentityBundle provider_bundle = 4; // client's current provider\n    PreKey pre_key = 5; // client's current x2dh pre-key\n    repeated PreKey one_time_keys = 6; // x2dh one-time keys (optional)\n    MediaContent profile_image = 7; // profile data. e.g. profile image\n    Signature signature = 8; // client signature on all other data fields\n}\n\n// Provider client service data - not api specific - move to data objects package\nmessage ClientServiceData {\n    uint64 service_started = 1;\n    uint64 service_ended = 2;\n    ClientIdentityBundle client_identity_bundle = 3;\n}\n\n// Provided published client bundle - includes provider signature on the data\nmessage ProviderSignedClientIdentityBundle {\n    ClientIdentityBundle client_bundle = 1;\n    Signature signature = 2; // provider attests all data\n}\n")),(0,r.kt)("h2",{id:"obtaining-providers-and-client-bundles"},"Obtaining Providers and Client Bundles"),(0,r.kt)("p",null,"Service providers operate SUB blockchain full nodes which have access to all data stored on the SUB blockchain. This data includes published identity bundles."),(0,r.kt)("p",null,"Service providers operate ",(0,r.kt)("inlineCode",{parentName:"p"},"service providers nodes")," which are online 24x7 on the network. Their nodes provide a public-service api for getting their signed bundles. So, to obtain a any published client or provider signed public bundle, a client or node needs only need to know its public service api dial-up info."),(0,r.kt)("p",null,"Once a client connects to one service provider node or to a bootstrap node, it can query it for bundles for any entity on the network using the provider's ",(0,r.kt)("inlineCode",{parentName:"p"},"Blockcahin Service")," api."),(0,r.kt)("p",null,"Service providers sign publish the identity bundles of their clients based on client's requests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"// Subnet blockchain service.\n// This service is provided to anyone by any provider or public SUB blockchain api provider.\n// Using this service, any entitiy can obtain the identity of any client or provider on the network.\nservice BlockchainService {\n\n  // Submit a transaction for processing\n  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);\n\n  // Sets balance for an address. Address will be added to ledger if needed. Used in genesis only.\n  rpc SetBalance(SetBalanceRequest) returns (SetBalanceResponse);\n\n  // Gets TransactionInfo for a tx id - will returned if in pool or on ledger\n  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);\n\n  // Returns account current state if exists on ledger\n  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);\n\n  // Returns block data\n  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);\n\n  // Returns current block data\n  rpc GetCurrentBlock(GetCurrentBlockRequest) returns (GetBlockResponse);\n\n  // built-in identity bundles support\n\n  // Gets the current provider identity bundle from the ledger for a provider id\n  rpc GetProviderIdentityBundle(GetProviderIdentityBundleRequest) returns (GetProviderIdentityBundleResponse);\n\n  // Get the current client identity bundle from the ledger for a client id\n  rpc GetClientIdentityBundle(GetClientIdentityBundleRequest) returns (GetClientIdentityBundleResponse);\n\n  // A temp convenience method used to get all clients registered in a network\n  rpc GetClients(GetClientsRequest) returns (GetClientsResponse);\n\n  // Returns all providers registered in a network\n  rpc GetProviders(GetProvidersRequest) returns (GetProvidersResponse);\n\n  // Proof of Useful Work related methods\n  /////////////////\n\n  // Returns recent created blocks count by an entity - PoUW\n  rpc GetValidatedBlocksCountByEntity(GetBlocksCountByEntityRequest) returns (GetBlocksCountByEntityResponse);\n\n  // Returns recent sealed blocks count by an entity - PoUW\n  rpc GetSealedBlocksCountByEntity(GetBlocksCountByEntityRequest) returns (GetBlocksCountByEntityResponse);\n}\n")))}u.isMDXComponent=!0}}]);